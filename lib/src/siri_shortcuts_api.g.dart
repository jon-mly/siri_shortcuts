// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum CreateShortcutStatus {
  cancelled,
  added,
  deleted,
  updated,
}

class CreateShortcutResult {
  CreateShortcutResult({
    required this.status,
    this.phrase,
    this.errorMessage,
  });

  CreateShortcutStatus status;
  String? phrase;
  String? errorMessage;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['status'] = status.index;
    pigeonMap['phrase'] = phrase;
    pigeonMap['errorMessage'] = errorMessage;
    return pigeonMap;
  }

  static CreateShortcutResult decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CreateShortcutResult(
      status: CreateShortcutStatus.values[pigeonMap['status']! as int]
,
      phrase: pigeonMap['phrase'] as String?,
      errorMessage: pigeonMap['errorMessage'] as String?,
    );
  }
}

class ShortcutDetail {
  ShortcutDetail({
    required this.activityType,
    required this.userInfo,
  });

  String activityType;
  Map<String?, Object?> userInfo;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['activityType'] = activityType;
    pigeonMap['userInfo'] = userInfo;
    return pigeonMap;
  }

  static ShortcutDetail decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ShortcutDetail(
      activityType: pigeonMap['activityType']! as String,
      userInfo: (pigeonMap['userInfo'] as Map<Object?, Object?>?)!.cast<String?, Object?>(),
    );
  }
}

class ShortcutOptions {
  ShortcutOptions({
    required this.activityType,
    required this.title,
    this.suggestedInvocationPhrase,
    this.userInfo,
    this.eligibility,
    this.description,
    this.requiredUserInfoKeys,
    this.needsSave,
    this.webpageURL,
    this.referrerURL,
    this.expirationDate,
    this.keywords,
    this.persistentIdentifier,
    this.contentType,
  });

  /// The activity type associated with the shortcut.
  String activityType;
  /// The user-visible title for the shortcut.
  String title;
  /// A human-understandable string that can be used to suggest a voice shortcut phrase to the user.
  String? suggestedInvocationPhrase;
  /// A map containing app-specific state information needed to continue an activity on another device.
  Map<String?, Object?>? userInfo;
  /// The eligibility for the shortcut.
  ShortcutEligibility? eligibility;
  /// A description for the shortcut.
  String? description;
  /// The keys from the userInfo property which represent the minimal information
  /// about the shortcut that should be stored for later restoration.
  ///
  /// A null value means all keys are required.
  List<String?>? requiredUserInfoKeys;
  /// Indicates that the state of the activity needs to be updated.
  bool? needsSave;
  /// When no suitable application is installed on a resuming device and the webpageURL is set,
  /// the shortcut will instead be continued in a web browser by loading this resource.
  String? webpageURL;
  /// The URL of the webpage that referred (linked to) [webpageURL].
  String? referrerURL;
  /// If non-null, then an absolute date after which
  /// the shortcut is no longer eligible to be indexed or handed off.
  int? expirationDate;
  /// A set of keywords, representing words or phrases in the current user's language
  /// that might help the user to find the shortcut in the application history.
  List<String?>? keywords;
  /// A value used to identify the shortcut.
  String? persistentIdentifier;
  /// The content type of the shortcut's attribute set.
  String? contentType;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['activityType'] = activityType;
    pigeonMap['title'] = title;
    pigeonMap['suggestedInvocationPhrase'] = suggestedInvocationPhrase;
    pigeonMap['userInfo'] = userInfo;
    pigeonMap['eligibility'] = eligibility?.encode();
    pigeonMap['description'] = description;
    pigeonMap['requiredUserInfoKeys'] = requiredUserInfoKeys;
    pigeonMap['needsSave'] = needsSave;
    pigeonMap['webpageURL'] = webpageURL;
    pigeonMap['referrerURL'] = referrerURL;
    pigeonMap['expirationDate'] = expirationDate;
    pigeonMap['keywords'] = keywords;
    pigeonMap['persistentIdentifier'] = persistentIdentifier;
    pigeonMap['contentType'] = contentType;
    return pigeonMap;
  }

  static ShortcutOptions decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ShortcutOptions(
      activityType: pigeonMap['activityType']! as String,
      title: pigeonMap['title']! as String,
      suggestedInvocationPhrase: pigeonMap['suggestedInvocationPhrase'] as String?,
      userInfo: (pigeonMap['userInfo'] as Map<Object?, Object?>?)?.cast<String?, Object?>(),
      eligibility: pigeonMap['eligibility'] != null
          ? ShortcutEligibility.decode(pigeonMap['eligibility']!)
          : null,
      description: pigeonMap['description'] as String?,
      requiredUserInfoKeys: (pigeonMap['requiredUserInfoKeys'] as List<Object?>?)?.cast<String?>(),
      needsSave: pigeonMap['needsSave'] as bool?,
      webpageURL: pigeonMap['webpageURL'] as String?,
      referrerURL: pigeonMap['referrerURL'] as String?,
      expirationDate: pigeonMap['expirationDate'] as int?,
      keywords: (pigeonMap['keywords'] as List<Object?>?)?.cast<String?>(),
      persistentIdentifier: pigeonMap['persistentIdentifier'] as String?,
      contentType: pigeonMap['contentType'] as String?,
    );
  }
}

class ShortcutEligibility {
  ShortcutEligibility({
    required this.search,
    required this.prediction,
    required this.handOff,
    required this.publicIndexing,
  });

  /// Set to true if the shortcut should be indexed by App History.
  bool search;
  /// Set to true if Siri should suggest the shortcut to users.
  bool prediction;
  /// Set to true if the shortcut should be eligible to be handed off to another device.
  bool handOff;
  /// Set to true if the shortcut should be eligible for indexing for any user of this application,
  /// on any device, or false if the activity contains private or sensitive information or
  /// which would not be useful to other users if indexed.
  ///
  /// The activity must also have [ShortcutOptions.requiredUserActivityKeys]
  /// or a [ShortcutOptions.webpageURL].
  bool publicIndexing;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['search'] = search;
    pigeonMap['prediction'] = prediction;
    pigeonMap['handOff'] = handOff;
    pigeonMap['publicIndexing'] = publicIndexing;
    return pigeonMap;
  }

  static ShortcutEligibility decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ShortcutEligibility(
      search: pigeonMap['search']! as bool,
      prediction: pigeonMap['prediction']! as bool,
      handOff: pigeonMap['handOff']! as bool,
      publicIndexing: pigeonMap['publicIndexing']! as bool,
    );
  }
}

class _SiriShortcutsApiCodec extends StandardMessageCodec{
  const _SiriShortcutsApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is CreateShortcutResult) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is ShortcutEligibility) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
    if (value is ShortcutOptions) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return CreateShortcutResult.decode(readValue(buffer)!);
      
      case 129:       
        return ShortcutEligibility.decode(readValue(buffer)!);
      
      case 130:       
        return ShortcutOptions.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class SiriShortcutsApi {
  /// Constructor for [SiriShortcutsApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  SiriShortcutsApi({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _SiriShortcutsApiCodec();

  Future<CreateShortcutResult> createShortcut(ShortcutOptions arg_options) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.SiriShortcutsApi.createShortcut', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_options]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as CreateShortcutResult?)!;
    }
  }
}

class _SiriShortcutsFlutterApiCodec extends StandardMessageCodec{
  const _SiriShortcutsFlutterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ShortcutDetail) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return ShortcutDetail.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}
abstract class SiriShortcutsFlutterApi {
  static const MessageCodec<Object?> codec = _SiriShortcutsFlutterApiCodec();

  void onShortcutTriggered(ShortcutDetail detail);
  static void setup(SiriShortcutsFlutterApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.SiriShortcutsFlutterApi.onShortcutTriggered', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.SiriShortcutsFlutterApi.onShortcutTriggered was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ShortcutDetail? arg_detail = (args[0] as ShortcutDetail?);
          assert(arg_detail != null, 'Argument for dev.flutter.pigeon.SiriShortcutsFlutterApi.onShortcutTriggered was null, expected non-null ShortcutDetail.');
          api.onShortcutTriggered(arg_detail!);
          return;
        });
      }
    }
  }
}
